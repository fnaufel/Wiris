
* Exemplo de esfera tangente a plano

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto
    xp = random([-10..10])
    yp = random([-10..10])
    zp = random([-10..10])

    # Escolher vetor v
    xv = random([-10..10]/[0])
    yv = random([-10..10]/[0])
    zv = 0

    # Escolher vetor w
    xw = random([-10..10]/[0])
    yw = random([-10..10]/[0])
    zw = random([-10..10]/[0])

    # Equações paramétricas do plano
    eqx = x = xp + xv * r + xw * s
    eqy = y = yp + yv * r + yw * s
    eqz = z = zp + zv * r + zw * s

    # Verificar
    gf(x0, y0, z0, r0) := begin

      nota = 0.0

      plano = plane(point(xp, yp, zp), [xv, yv, zv], [xw, yw, zw])
      centro = point(x0, y0, z0)
      raio = r0
      # Achar ponto do plano mais próximo ao centro da esfera do aluno
      ponto = closest_point3d(plano, centro)
      # Se a distância do ponto ao centro for o raio, ok
      if distance(ponto, centro) = raio then
        nota = 1.0
      end

      return nota

    end
  #+end_src

* Exemplo de esfera tangente a plano (CLOZE, abandonado)

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto
    xp = random([-10..10])
    yp = random([-10..10])
    zp = random([-10..10])

    # Escolher vetor v
    xv = random([-10..10]/[0])
    yv = random([-10..10]/[0])
    zv = 0

    # Escolher vetor w
    xw = random([-10..10]/[0])
    yw = random([-10..10]/[0])
    zw = random([-10..10]/[0])

    # Equações paramétricas do plano
    eqx = x = xp + xv * r + xw * s
    eqy = y = yp + yv * r + yw * s
    eqz = z = zp + zv * r + zw * s

    # Resposta do aluno
    parameter answer = 0
    x0 = answer.1
    y0 = answer.2
    z0 = answer.3
    r2 = answer.4
    centro = point(x0, y0, z0)
    raio = sqrt(r2)

    # Verificar

    # Plano
    plano = plane(point(xp, yp, zp), [xv, yv, zv], [xw, yw, zw])

    # Achar ponto do plano mais próximo ao centro da esfera do aluno
    ponto = closest_point3d(plano, centro)

    # Se a distância do ponto ao centro for o raio, ok
    if distance(ponto, centro) = raio then
      x0ok = x0
      y0ok = y0
      z0ok = z0
      r2ok = r2
    else
      x0ok = NaN
      y0ok = NaN
      z0ok = NaN
      r2ok = NaN
    end
  #+end_src

  
* Exemplo de terceiro ponto colinear a 2 pontos

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto 1
    x1 = random([-10..0])
    y1 = random([1..10])
    z1 = random([-10..0])

    # Escolher ponto 2
    x2 = random([1..10])
    y2 = random([-10..0])
    z2 = random([1..10])

    # Verificar
    gf(x3, y3, z3) := begin

      nota = 0.0

      v = [x2 - x1, y2 - y1, z2 - z1]
      w = [x3 - x2, y3 - y2, z3 - z2]

      if parallel?(v, w) then
        nota = 1.0
      end
  
      if [x3, y3, z3] = [x1, y1, z1] || [x3, y3, z3] = [x2, y2, z2] then
        nota = 0.0
      end
  
      return nota

    end
  #+end_src

* Exemplo de quarto ponto coplanar a 3 pontos

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto 1
    x1 = random([-10..0])
    y1 = random([1..10])
    z1 = random([-10..0])

    # Escolher ponto 2
    x2 = random([1..10])
    y2 = random([-10..0])
    z2 = random([1..10])

    # Escolher ponto 3
    x3 = random([-10..0])
    y3 = random([-10..0])
    z3 = random([1..10])

    # Verificar
    gf(x4, y4, z4) := begin

      nota = 0.0

      P1 = point(x1, y1, z1)
      P2 = point(x2, y2, z2)
      P3 = point(x3, y3, z3)
      P4 = point(x4, y4, z4)

      if coplanars?({P1, P2, P3, P4}) then
        nota = 1.0
      end

      if P4 = P1 || P4 = P2 || P4 = P3 then
        nota = 0.0
      end

      return nota

    end
  #+end_src
  
* Equação cartesiana de plano passando por 3 pontos

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto 1
    x1 = random([-10..0])
    y1 = random([-10..0])
    z1 = random([-10..0])

    # Escolher ponto 2
    x2 = random([1..10])
    y2 = random([1..10])
    z2 = random([1..10])

    # Escolher ponto 3
    x3 = random([-10..0])
    y3 = random([1..10])
    z3 = random([1..10])

    # Verificar
    gf(a, b, c, d) := begin

      nota = 0.0

      P1 = point(x1, y1, z1)
      P2 = point(x2, y2, z2)
      P3 = point(x3, y3, z3)

      if plane(P1, P2, P3) = plane(a, b, c, d) then
        nota = 1.0
      end

      return nota

    end
  #+end_src

* Posição relativa de duas retas

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Escolher ponto 1
    x1 = random([-10..0])
    y1 = random([-10..0])
    z1 = random([-10..0])

    # Escolher ponto 2
    x2 = random([1..10])
    y2 = random([1..10])
    z2 = random([1..10])

    # Escolher ponto 3
    x3 = random([-10..0])
    y3 = random([1..10])
    z3 = random([1..10])

    # Escolher ponto 4
    x4 = random([1..10])
    y4 = random([1..10])
    z4 = random([1..10])

    # Retas
    r1 = line(point(x1, y1, z1), point(x2, y2, z2))
    r2 = line(point(x3, y3, z3), point(x4, y4, z4))

    # Vetores diretores
    v1 = vector(r1)
    v2 = vector(r2)

    # Interseção
    inter = intersect(r1, r2)

    if parallel?(v1, v2) then
      if inter = {} then
        resposta = 1 # paralelas
      else
        resposta = 2 # coincidentes
      end
    else
      if inter = {} then
        resposta = 3 # reversas
      else
        resposta = 4 # concorrentes
      end
    end

    opcoes = {"paralelas", "coincidentes", "reversas", "concorrentes"}
    correta = opcoes.resposta
    incorretas = opcoes/{correta}
    incorreta1 = incorretas.1
    incorreta2 = incorretas.2
    incorreta3 = incorretas.3
  #+end_src

