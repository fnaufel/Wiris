
* DONE Transformar tudo em funções
  CLOSED: [2022-10-19 Wed 17:22]
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2022-10-19 Wed 17:22]
  CLOCK: [2022-10-18 Tue 13:02]--[2022-10-18 Tue 13:50] =>  0:48
  - State "STARTED"    from "TODO"       [2022-10-18 Tue 13:02]
  :END:

* Converter de geral para canônica

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end


    # Recebe uma EQUAÇÃO e retorna lista de dois elementos: lhs e rhs
    canonica(eqgeral) := begin
      local curva, tipo, centro, h, k, r, foco, vertice, p, a, b, lhs, rhs

      curva = conic(eqgeral)
      tipo = achartipo(curva)

      if tipo = "circulo" then
        # Para achar centro e raio, é preciso transformar em circunferência
        curva = cfr(eqgeral)
        centro = center(curva)
        h = centro.1
        k = centro.2
        r = radius(curva)
        lhs = (x - h)^2 + (y - k)^2
        rhs = r^2
      end

      if tipo = "parabola" then
        foco = focus(curva)
        vertice = vertex(curva)
        p = distance(foco, vertice)
        h = vertice.1
        k = vertice.2
        if h = foco.1 then # eixo vertical
          lhs = y - k
          rhs = 1/(4*p) * (x - h)^2
        else # eixo horizontal
          lhs = x - h
          rhs = 1/(4*p) * (y - k)^2
        end
      end

      if tipo = "elipse" then
        centro = center(curva)
        h = centro.1
        k = centro.2
        a = semimajor_axis(curva)
        b = semiminor_axis(curva)
        foco = focus(curva).1
        if h = foco.1 then # eixo maior vertical
          lhs = (x - h)^2 / b^2 + (y - k)^2 / a^2
        else # eixo maior horizontal
          lhs = (x - h)^2 / a^2 + (y - k)^2 / b^2
        end
        rhs = 1
      end

      if tipo = "hiperbole" then
        centro = center(curva)
        h = centro.1
        k = centro.2
        a = semimajor_axis(curva)
        b = semiminor_axis(curva)
        foco = focus(curva).1
        if h = foco.1 then # eixo real vertical
          lhs = -(x - h)^2 / b^2 + (y - k)^2 / a^2
        else # eixo real horizontal
          lhs = (x - h)^2 / a^2 - (y - k)^2 / b^2
        end
        rhs = 1
      end

      return {lhs, rhs}

    end

    resposta = canonica(eqgeral)
    lhs = resposta.1
    rhs = resposta.2
    lhsstr = latex(lhs)
    rhsstr = latex(rhs)


    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = canonica(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)

    # lhs = resposta.1
    # rhs = resposta.2
  #+end_src
  
* Determinar tipo (não-degenerada)

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    total = 80
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    questaotipo(eqgeral) := begin
      local curva, tipos, tipostxt, tipo, ncorreta, correta, incorretas, rv

      # Converter para cônica
      curva = conic(eqgeral)
  
      # Tipos para questão de múltipla escolha
      tipos = {"circulo", "elipse", "parabola", "hiperbole"}
      tipostxt = {"Um círculo", "Uma elipse", "Uma parábola", "Uma hipérbole"}
      tipo = achartipo(curva)
      ncorreta = index(tipo, tipos)
      correta = tipostxt.ncorreta
      incorretas = { i with i in tipostxt where not (i = correta) }
      rv = prepend(incorretas, correta)
      return rv
    end

    escolhas = questaotipo(eqgeral)

    correta = escolhas.1
    incorreta1 = escolhas.2
    incorreta2 = escolhas.3
    incorreta3 = escolhas.4


    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, escolhas
    #   eqgeral = expression(eqstr)
    #   escolhas = questaotipo(eqgeral)
    #   return escolhas
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)
  #+end_src
  
* Achar centro

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Join list of strings
    joinstrings(sl) := begin
      rv = ""
      for s in sl do
        rv = rv | s
      end
      return rv
    end

    # Convert a 2D point to latex string
    point2Dtolatex(p) := begin
      return "\left( " | latex(p.1) | ", " | latex(p.2) | " \\right)"
    end

    # Convert a list of 2D points to latex string
    point2Dlisttolatex(pl) := begin
      local rv, i, rv2
      if length(pl) = 0 do
        rv = "\{ \}"
      else
        rv = {}
        for p in pl do
          rv = append(rv, point2Dtolatex(p))
          rv = append(rv, ", ")
        end
        rv = replace(rv, length(rv), " \\right\}")
        rv = prepend(rv, "\left\{ ")
        rv = joinstrings(rv)
      end
      return rv
    end

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    total = 80
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    acharcentro(eqgeral) := begin
      local curva, tipo, rv
      # Determinar tipo
      curva = conic(eqgeral)
      tipo = achartipo(curva)
      if tipo = "parabola" then
        rv = {}
      else
        rv = { center(curva) }
      end
      return rv
    end

    resposta = acharcentro(eqgeral)
    respostastr = point2Dlisttolatex(resposta)

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = acharcentro(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)

  #+end_src
  
* Achar vértices (só eixos paralelos a Ox ou Oy)

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Join list of strings
    joinstrings(sl) := begin
      rv = ""
      for s in sl do
        rv = rv | s
      end
      return rv
    end

    # Convert a 2D point to latex string
    point2Dtolatex(p) := begin
      return "\left( " | latex(p.1) | ", " | latex(p.2) | " \\right)"
    end


    # Convert a list of 2D points to latex string
    point2Dlisttolatex(pl) := begin
      local rv, i, rv2
      if length(pl) = 0 do
        rv = "\{ \}"
      else
        rv = {}
        for p in pl do
          rv = append(rv, point2Dtolatex(p))
          rv = append(rv, ", ")
        end
        rv = replace(rv, length(rv), " \\right\}")
        rv = prepend(rv, "\left\{ ")
        rv = joinstrings(rv)
      end
      return rv
    end

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    # SOMENTE para cônicas com eixos paralelos a Ox ou Oy
    acharvertices(eqgeral) := begin
      local curva, tipo, resposta
  
      curva = conic(eqgeral)
      tipo = achartipo(curva)

      if tipo = "circulo" then
        resposta = {}
      else_if tipo = "parabola" then
        resposta = { vertex(curva) }
      else_if tipo = "elipse" then
        resposta = { point(curva, angulo) with angulo in { 0, Pi_/2, Pi_, 3*Pi_/2 } }
      else
        resposta = { point(curva, angulo) with angulo in { 0, Pi_ } }
      end
      return resposta
    end

    resposta = acharvertices(eqgeral)
    respostastr = point2Dlisttolatex(resposta)

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = acharvertices(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)
  #+end_src

* Achar focos

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Join list of strings
    joinstrings(sl) := begin
      rv = ""
      for s in sl do
        rv = rv | s
      end
      return rv
    end

    # Convert a 2D point to latex string
    point2Dtolatex(p) := begin
      return "\left( " | latex(p.1) | ", " | latex(p.2) | " \\right)"
    end


    # Convert a list of 2D points to latex string
    point2Dlisttolatex(pl) := begin
      local rv, i, rv2
      if length(pl) = 0 do
        rv = "\{ \}"
      else
        rv = {}
        for p in pl do
          rv = append(rv, point2Dtolatex(p))
          rv = append(rv, ", ")
        end
        rv = replace(rv, length(rv), " \\right\}")
        rv = prepend(rv, "\left\{ ")
        rv = joinstrings(rv)
      end
      return rv
    end

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    acharfocos(eqgeral) := begin
      local curva, tipo, resposta
      curva = conic(eqgeral)
      tipo = achartipo(curva)
      if tipo = "circulo" then
        resposta = {}
      else_if tipo = "parabola" then
        resposta = { focus(curva) }
      else
        resposta = focus(curva)
      end
      return resposta
    end

    resposta = acharfocos(eqgeral)
    respostastr = point2Dlisttolatex(resposta)

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = acharfocos(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)

  #+end_src
  
* Achar excentricidade

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    curva = conic(eqgeral)
    resposta = eccentricity(curva)
    respostastr = latex(resposta)

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta, curva
    #   eqgeral = expression(eqstr)
    #   curva = conic(eqgeral)
    #   resposta = eccentricity(curva)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)
  #+end_src

* Achar diretriz (só parábola, eixo vertical ou horizontal)

  #+begin_src python

    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    achardiretriz(eqgeral) := begin
      local tipo, curva, foco, vertice, p, h, k, lhs, rhs
      curva = conic(eqgeral)
      tipo = achartipo(curva)
      if tipo = "parabola" then
        foco = focus(curva)
        vertice = vertex(curva)
        p = distance(foco, vertice)
        h = vertice.1
        k = vertice.2
        if h = foco.1 then # eixo vertical
          lhs = y
          if k < foco.2 then # concavidade p cima
            rhs = k - p
          else # concavidade p baixo
            rhs = k + p
          end
        else  # eixo horizontal
          lhs = x
          if h < foco.1 then # concavidade p dir
            rhs = h - p
          else # concavidade p esq
            rhs = k + p
          end
        end
      else
        lhs = 0
        rhs = 0
      end
      return { lhs, rhs }
    end

    resposta = achardiretriz(eqgeral)
    lhs = resposta.1
    rhs = resposta.2

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = achardiretriz(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)
  #+end_src

* Achar assíntotas (só eixo vertical ou horizontal)

  #+begin_src python

    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = {"2x^2+y^2-4x+5y-1", "x^2+2y^2-5x-5y+1", "-4x^2-2y^2-5x+y+1", "-x^2-y^2-4x+y+5", "-3x^2-5y^2+3x-2y", "5x^2+5y^2-5y", "-x^2-2y^2+4x+2y+5", "-2x^2-5y^2+y+4", "-x^2-y^2-4x-3y+4", "-2x^2-4y^2+3x+3y+1", "-5x^2-y^2-x-4y+2", "-5x^2-2y^2+4x+4y-1", "-4x^2-5y^2-2x+2y+2", "-3x^2-y^2-x+4y", "-5x^2-5y^2-5x+2", "x^2+5y^2-4x+y+1", "5x^2+2y^2-4x+4y-1", "-5x^2-y^2+5x-2y+5", "-x^2-3y^2+2x+5y+1", "-x^2-5y^2-2x-5y+3", "5x^2+3y^2-x+5y", "5x^2+y^2+3y-1", "3x^2+5y^2-4x+4y+2", "4x^2+2y^2-2x+y-5", "x^2+2y^2-x-5y+1", "2x^2+y^2+4x+4y-1", "2x^2+y^2+2x", "-4x^2+y^2-4x+5y+4", "-2x^2+2y^2+5x-4y+2", "5x^2-2y^2+4x-4y", "-3x^2+y^2-2x+4y+3", "-3x^2+2y^2-3x-3y-3", "-5x^2+3y^2+3x+3y-4", "-5x^2+3y^2-x+2y-5", "-4x^2+5y^2+x-y-1", "5x^2-3y^2-5x+4y+2", "5x^2-y^2+3x+5y-2", "-x^2+2y^2-5x-2y-2", "4x^2-4y^2-x-y+1", "2x^2-2y^2+3x+2", "-2x^2+4y^2+4x-5y-4", "5x^2-2y^2+2x+2y+2", "-x^2+y^2+3x-4", "-2x^2+4y^2-2x+3y+5", "-4x^2+5y^2+5x", "-3x^2+5y^2-4x+4y-2", "-x^2+4y^2+5x-4y-1", "-2x^2+2y^2-4x-3y-5", "-4x^2+2y^2+3x-3y-1", "-3x^2+3y^2-2x-4", "-5x^2+2y^2-2x-3y+2", "-2x^2+2y^2-3y+2", "-2x^2+5y^2-5x+3y+1", "5x^2-2y^2-x-5y-2", "-5y^2+2x+5", "-y^2-2x-2y+1", "4x^2-x+2y+1", "-3y^2+2x+3", "-x^2-4x-2y-4", "-3y^2+2x+5y-2", "y^2+5x+3y+1", "-4y^2-2x-2y", "4x^2-4x+y-5", "2y^2-3x+4y", "-2y^2+x+3y-1", "4x^2-x-3y+5", "-x^2+3x+3y-2", "3y^2-3x-4y", "3y^2+2x+y+1", "-2x^2-5x+2y-3", "-2y^2-3x+y+3", "-3x^2+2x-4y-3", "-4x^2-5x+2y+2", "-2x^2+3x+4y-5", "2x^2-x-y+3", "y^2-x-y-1", "x^2+5x+2y-3", "-5x^2+2y", "-5x^2-5x-2y+2", "-x^2+3x+5y-4"}

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    # Determinar tipo usando excentricidade
    # Só vale para não-degenerada???
    # Recebe uma CÔNICA e retorna string
    achartipo(curva) := begin 
      local exc, tipo
      exc = eccentricity(curva)
      if exc = 0 then 
        tipo = "circulo"
      else_if exc = 1 then
        tipo = "parabola"
      else_if exc < 1 then
        tipo = "elipse"
      else
        tipo = "hiperbole"
      end
      return tipo
    end

    acharassintotas(eqgeral) := begin
      local curva, tipo, a, b, h, k, centro, foco, ass1, ass2
      curva = conic(eqgeral)
      tipo = achartipo(curva)
      if tipo = "hiperbole" then
        a = semimajor_axis(curva)
        b = semiminor_axis(curva)
        centro = center(curva)
        h = centro.1
        k = centro.2
        foco = focus(curva).1
        if h = foco.1 then # eixo real vertical
          ass1 = -(a/b) * (x - h) + k
          ass2 = (a/b) * (x - h) + k
        else  # eixo real horizontal
          ass1 = -(b/a) * (x - h) + k
          ass2 = (b/a) * (x - h) + k
        end
      else
        ass1 = 0
        ass2 = 0
      end
      return { ass1, ass2 }
    end

    resposta = acharassintotas(eqgeral)
    ass1 = resposta.1
    ass2 = resposta.2

    # TESTES

    # testar(eqstr) := begin
    #   local eqgeral, resposta
    #   eqgeral = expression(eqstr)
    #   resposta = acharassintotas(eqgeral)
    #   return resposta
    # end

    # Elipse
    #resposta = testar(eqsgeraisstr.1)

    # Círculo
    #resposta = testar(eqsgeraisstr.4)

    # Hiperbola
    #resposta = testar(eqsgeraisstr.28)
    #resposta = testar(eqsgeraisstr.31)

    # Parábola
    #resposta = testar(eqsgeraisstr.60)
  #+end_src

  
* Cônica degenerada

  #+begin_src python
    # Fix seed per student
    parameter user_id = 0
    random_seed(user_id)

    # Cônicas
    eqsgeraisstr = { "-y^2-3y+3", "-5x^2+2x+4", "2y^2+y-1", "y^2+y-1", "x^2+4x-1", "x^2+5x+5", "4y^2+y-5", "3y^2-5y-1", "3x^2-5x-5", "2x^2+2x-3", "x^2-4x-4", "5y^2+2y", "-3x^2-4x", "-4y^2+1", "5y^2+5y", "3x^2-4x-3", "4x^2+5x", "-3y^2-y+5", "-x^2+5x-3", "4y^2-2", "-3y^2+2y", "-y^2-y+2", "-5x^2+2x", "x^2+5x-4", "-x^2+x+1", "-3x^2+4", "4x^2-3x-5", "-4x^2-4x", "-2x^2-3x", "5y^2+3y-4", "-5x^2-4x+5", "-2x^2+2x+2", "-2x^2+4", "2x^2-2x-2", "-3x^2+2x", "3x^2-3", "-2x^2-x+3", "-x^2+4x-1", "-y^2-2y+5", "2y^2+4y-3", "5x^2-2x", "4x^2-5y^2+2x+5y-1", "-5x^2+5y^2+3x-3y", "5x^2-5y^2+3x+3y", "-5x^2+5y^2-5x-5y", "5x^2-y^2+5x+3y-1", "4x^2-3y^2", "-4x^2+5y^2+2x-5y+1", "-4x^2+4y^2-3x+3y", "2x^2-2y^2-5x-5y", "x^2-y^2-2x-2y", "-x^2+4y^2+3x+2y-2", "-3x^2+3y^2-4x-2y-1", "4x^2-y^2+4x+4y-3", "x^2-y^2-2x+1", "4x^2-4y^2-x-y", "-3x^2+2y^2+4y+2", "-x^2+y^2-4x+2y-3", "2x^2-2y^2-3x-5y-2", "x^2-4y^2+x+2y", "5x^2-y^2-4y-4", "2x^2-2y^2-x+3y-1", "4x^2-4y^2-3x-3y", "-5x^2+5y^2+x+y", "5x^2-5y^2+5x-5y", "-5x^2+5y^2-2x-2y", "2x^2-y^2-4y-4", "-x^2+2y^2+2x-4y+1", "-3x^2+3y^2+4x-2y-1", "-2x^2+2y^2-x-3y+1", "-4x^2+y^2+4x+4y+3", "-2x^2+2y^2", "x^2-4y^2-x+2y", "4x^2-4y^2+5x-3y+1", "5x^2-5y^2+2x+2y", "-5x^2+y^2+5x-5y+5", "-2x^2+4y^2-4x-2", "x^2-y^2-3x+5y-4", "-2x^2+2y^2+5x-3y-2", "5x^2-4y^2+4y-1", "-3x^2+4y^2" }

    # Sortear equação string
    total = 80 #length(eqsgeraisstr)
    n = random(1..total)
    eqgeralstr = eqsgeraisstr.n

    # Converter para expressão
    eqgeral = expression(eqgeralstr)

    classificar(eqgeral) := begin
      local coefsx, coefsy, A, C, D, E, F
      coefsx = substitute(coefficients(eqgeral, x), y, 0)
      coefsy = substitute(coefficients(eqgeral, y), x, 0)

      # Ax^2 + Cy^2 + Dx + Ey + F

      if length(coefsx) = 3 then
        A = coefsx.3
      else
        A = 0
      end

      if length(coefsy) = 3 then
        C = coefsx.3
      else
        C = 0
      end

      if length(coefsx) >= 2 then
        D = coefsx.2
      else
        D = 0
      end

      if length(coefsy) >= 2 then
        E = coefsx.2
      else
        E = 0
      end

      F = coefsx.1

      # TODO: continue from here
    end
  #+end_src

* Tipo de cônica degenerada

